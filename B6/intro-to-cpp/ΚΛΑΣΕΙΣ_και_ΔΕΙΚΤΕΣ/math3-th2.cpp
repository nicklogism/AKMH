/* ΚΛΑΣΕΙΣ & ΔΕΙΚΤΕΣ */

/*
************************ Δυναμική Δέσμευση (new,delete) ********************

Ένας δείκτης είναι μια μεταβλητή που αποθηκεύει διευθύνσεις μεταβλητών.
Δηλώνεται ως εξής:
Τύπος_Δεδομένων *pointer_name;
πχ
int *ptr;

Αποθηκεύουμε μια διεύθυνση μιας μεταβλητής ως εξής:
ptr = &variable;

Παραπάνω λέμε ότι "Ο δείκτης ptr ΔΕΙΧΝΕΙ στη μεταβλητή variable"

Όταν θέλουμε να δηλώσουμε έναν δείκτη που δεν δείχνει ακόμη κάπου, τότε
int *p = NULL;
Το NULL είναι ειδική τιμή που καλό είναι να χρησιμοποιηθεί γι' αυτό το σκοπό.
Η τιμή του NULL είναι 0.

Για έναν δείκτη p που δείχνει σε μια μεταβλητή x, δηλαδή
int *p=NULL;
p=&x;
Ισχύουν:
p==&x (Διεύθυνση της x)
*p==x (Τιμή της x)

Οι τελεστές new και delete αντικαθιστούν στην ουσία τους malloc και free της C.

Δυναμική δέσμευση μνήμης κάνω ως εξής:
ptr = new type; (λέξη κλειδί new) {όπου type τύπος δεδομένων}
Δεσμεύει χώρο στη μνήμη για ένα αντικείμενο τύπου type και ΕΠΙΣΤΡΕΦΕΙ ΕΝΑΝ ΔΕΙΚΤΗ
σε αυτό το χώρο. Ο χώρος αυτός είναι κοινός για όλες τις συναρτήσεις και ονομάζεται
σωρός (heap).

Πρέπει πάντα να ελέγχουμε ότι η δέσμευση έγινε επιτυχημένα. Αν δεν έχει γίνει
επιτυχημένα, δεν δεσμεύεται χώρος, επιστρέφει NULL.

Ο τελεστής delete αντίστοιχα αποδεσμεύει το χώρο μνήμης που έχει δεσμευτεί δυναμικά.
Είναι ευθύνη του προγραμματιστή να αποδεσμεύει τον χώρο αυτόν!

Σύνταξη:
delete ptr; (λέξη κλειδί delete)

Έλεγχος επιστρεφόμενης τιμής για δυναμική δέσμευση μνήμης. Αν η μνήμη δεν
δεσμευτεί, τότε κάνουμε κάποιες ενέργειες.
NULL = 0 {Λογικό ΨΕΥΔΕΣ}

ptr=new int;

Πρώτος (απλός) τρόπος
if(ptr==NULL)
  {do something}

Δεύτερος τρόπος
if (!(ptr = new type))
  {do something}


Τρίτος τρόπος
if (!ptr)
  {do something}

Για τη σωστή δέσμευση μνήμης το ptr πρέπει να έχει κάποια τιμή {Λογικό ΑΛΗΘΕΣ}.
Το λογικό NOT αυτής της τιμής είναι {Λογικό ΨΕΥΔΕΣ} NULL. Οπότε αν !ptr ,
δηλαδή NULL, δηλαδή δεν έχει δεσμευτεί μνήμη, τότε κάνε κάποιες ενέργειες.

*/

#include <iostream>
using namespace std;

int main()
{
  int x; //στατική δέσμευση μνήμης
  int *p; // δείκτης σε ακέραιο

  p=new int; //δυναμική δέσμευση μνήμης
  if(!p) cout << "Error allocating memory";

  x=1;
  *p=5;

  cout<<"x="<<x<<"(address:"<<&x<<")";
  cout<<endl<<endl;
  cout<<"*p="<<*p<<"(address:"<<p<<")";

  delete p; // αποδέσμευση μνήμης

  return 0;

}
